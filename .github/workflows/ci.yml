name: CI

on:
  push:
    branches: [ main, staging, trying ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NO_STD_TARGET: thumbv7em-none-eabi  # firmware uses atomics

jobs:
#  test:
#    strategy:
#      matrix:
#        rust:
#          - stable
          #- nightly
#        os:
#          - ubuntu-latest
          #- macOS-latest
          #- windows-latest
          # FIXME: Reenable macOS, Windows, and nightly once binfmt is open-sourced.
#    runs-on: ${{ matrix.os }}
#    timeout-minutes: 10
#    steps:
#    - uses: actions/checkout@v2
#    - uses: actions-rs/toolchain@v1
#      with:
#        profile: minimal
#        toolchain: ${{ matrix.rust }}
#        override: true
#    - name: Setup mdBook
#      uses: peaceiris/actions-mdbook@v1
#      with:
#        mdbook-version: latest
#    - name: Install C libraries for tooling
#      if: matrix.os == 'ubuntu-latest'
#      run: sudo apt-get update && sudo apt-get install libudev-dev libusb-1.0-0-dev
#    - name: Build
#      run: cargo build
      # NOTE order is important; running `mdbook` at the end = duplicate crate errors
#    - name: Run book tests
#      working-directory: book
#      run: mdbook test -L ../target/debug -L ../target/debug/deps
#    - name: Run tests
#      run: cargo test --workspace

  no-std:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ env.NO_STD_TARGET }}
    - name: Build QEMU examples
      working-directory: firmware/qemu
      run: cargo build --verbose --target ${{ env.NO_STD_TARGET }} --bins
    - name: Build nRF52 examples
      working-directory: firmware/nrf52
      run: cargo build --verbose --target ${{ env.NO_STD_TARGET }} --bins
    - name: Run QEMU examples
      working-directory: firmware/qemu
      run: |
        cargo run --target ${{ env.NO_STD_TARGET }} --bin log
        cargo rb log
        cargo rrb log
# todo if that works, compile with --deny warnings